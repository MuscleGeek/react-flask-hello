pipenv run reset_db

@@@@@@@@@@@@@@@favorite methods tested@@@@@@@@@@@@
https://codeshare.io/GqgdNx
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Apunte de flux para backend_url
`${process.env.BACKEND_URL}/favorites`

<<<<<<< HEAD
<<<<<<< HEAD



################################FAVORITE FUNCTIONS#########TESTED######
            deleteFavorites: async fav_id => {
				const res = await fetch(`https://3001-apricot-tahr-nih1bqo0.ws-us03.gitpod.io/favorite/${fav_id}`, {
					method: "DELETE",
					headers: {
						"Content-Type": "application/json",
						Authorization: `Bearer ${store.jwtoken}`
					}
				});
				const info = await res.json(); //traemos data del fetch
				console.log(info);
				const delFav = getStore().favorites;
				const existingFav = delFav.filter(i => i.cocktail_id !== fav_id);
				setStore({ favorites: [...existingFav] });
			},
######################################################################################
			deleteFavoritez: async fav_id => {
				const store = getStore();
				const drinkIndex = store.favorites.findIndex(i => i.cocktail_id == fav_id);
				console.log("####$: ", drinkIndex);
				let favID = await store.favorites[drinkIndex].id;
				console.log("ID: ", favId);
				if (drinkIndex != -1) {
					fetch(`https://3001-apricot-tahr-nih1bqo0.ws-us03.gitpod.io/favorites/${favID}`, {
						method: "DELETE"
					}).then(() => getActions().getUserFavorites(store.sessionUID));
				}
			},
#######################################################################################
			deleteFavoritex: id => {
				const store = getStore();
				const FavList = store.favorites.filter((item, f) => id != f);
				setStore({ favorites: [...FavList] });
			},
#######################################################################################
			deleteFavoritess: async fav_id => {
				const res = await fetch(`https://3001-apricot-tahr-nih1bqo0.ws-us03.gitpod.io/favorite/${fav_id}`, {
					method: "DELETE"
				});
				const info = await res.json(); //traemos data del fetch
				console.log(info);
				const delFav = getStore().favorites;
				const existingFav = delFav.filter(i => i.cocktail_id !== fav_id);
				setStore({ favorites: [...existingFav] });
			}


****************************************flask-mail**********************************
from flask_mail import Mail, Message

app.config.update(
	DEBUG=True,
	#EMAIL SETTINGS
	MAIL_SERVER='smtp.gmail.com',
	MAIL_PORT=465,
	MAIL_USE_SSL=True,
	MAIL_USERNAME = 'correo@correo.com',
	MAIL_PASSWORD = 'password'
	)
mail = Mail(app)
def test_request():
    # json_obj = {"name": "daniel"}
    recipient = "alguien@correo.com"
    try:
        msg = Message("Hello",
                  sender="correo@correo.com",
                  recipients=[recipient])
        msg.body = "Welcome to blah blah blah"        mail.send(msg)
        return "Mail Sent"    except Exception as e:
        return (str(e))

***********************************************************************************


###############################alternative testing for delFav******************
			deleteFavoritez: async fav_id => {
				const store = getStore();
				const drinkIndex = store.favorites.findIndex(i => i.cocktail_id == fav_id);
				console.log("####$: ", drinkIndex);
				let favID = await store.favorites[drinkIndex].id;
				console.log("ID: ", favId);
				if (drinkIndex != -1) {
					fetch(`https://3001-chocolate-tarantula-5ng0qguc.ws-us03.gitpod.io/favorites/${favID}`, {
						method: "DELETE"
					}).then(() => getActions().getUserFavorites(store.sessionUID));
				}
			},

			deleteFavoritex: id => {
				const store = getStore();
				const FavList = store.favorites.filter((item, f) => id != f);
				setStore({ favorites: [...FavList] });
			},

			deleteFavoritess: async fav_id => {
				const res = await fetch(
					`https://3001-chocolate-tarantula-5ng0qguc.ws-us03.gitpod.io/favorite/${fav_id}`,
					{
						method: "DELETE"
					}
				);
				const info = await res.json(); //traemos data del fetch
				console.log(info);
				const delFav = getStore().favorites;
				const existingFav = delFav.filter(i => i.cocktail_id !== fav_id);
				setStore({ favorites: [...existingFav] });
			}
//Comentario
=======
// Página Finalizada!
>>>>>>> 485b538ca327b0eebee6569bbb1977fe436ef151
=======
// Página Finalizada!

// import React from 'react'
// import {auth} from '../firebase'
// import {withRouter} from 'react-router-dom'

// const ResetPass = (props) => {

//     const [email, setEmail] = React.useState('')
//     const [error, setError] = React.useState(null)

//     const procesarDatos = e => {
//         e.preventDefault()
//         if(!email.trim()){
//             console.log('Datos vacíos email!')
//             setError('Datos vacíos email!')
//             return
//         }
//         setError(null)

//         recuperar()

//     }

//     const recuperar = React.useCallback(
//         async () => {
//             try {
//                 await auth.sendPasswordResetEmail(email)
//                 props.history.push('/login')
//             } catch (error) {
//                 console.log(error)
//                 setError(error.message)
//             }
//         },
//     [email, props.history])

//     return (
//         <div className="mt-5">
//             <h3 className="text-center">
//                 Recuperar contraseña
//             </h3>
//             <hr/>
//             <div className="row justify-content-center">
//                 <div className="col-12 col-sm-8 col-md-6 col-xl-4">
//                     <form onSubmit={procesarDatos}>
//                         {
//                             error ? (
//                                 <div className="alert alert-danger">
//                                     {error}
//                                 </div>
//                             ) : null
//                         }
//                         <input 
//                             type="email" 
//                             className="form-control mb-2"
//                             placeholder="Ingrese Email"
//                             onChange={ e => setEmail(e.target.value) }
//                             value={email}
//                         />
//                         <button 
//                             className="btn btn-lg btn-dark btn-block"
//                             type="submit"
//                         >
//                             Recuperar
//                         </button>
//                     </form>
//                 </div>
//             </div>
//         </div>
//     )
// }

// export default withRouter(ResetPass)
>>>>>>> 98573fc391c20a2e8cca4024c6ed218ccb03c6f0
